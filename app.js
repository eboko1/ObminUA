require('dotenv').config();
const Telegraf = require('telegraf');
const axios = require('axios');
const currency_codes = require('currency-codes');
const Markup = require('telegraf/markup');
const fetch = require('node-fetch');

const bot = new Telegraf(process.env.BOT_TOKEN);

  bot.start((ctx) => ctx.reply(
  `–ü—Ä–∏–≤—ñ—Ç ${ctx.message.from.first_name}!
   –¶–µ–π –ß–∞—Ç-–ë–æ—Ç –Ω–∞–¥–∞—î –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ *–∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç* –≤ —Ä–µ–∂–∏–º—ñ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É –∑—ñ 
   —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –ë–∞–Ω–∫—ñ–≤ –£–∫—Ä–∞—ó–Ω–∏ —Ç–∞–∫–æ–∂ —Ç–∏ –∑–º–æ–∂–µ—à –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É –∞–∫—Ç—É–∞–ª—å–Ω–∏–π 
   –∫—É—Ä—Å –º–µ—Ç–∞–ª—ñ–≤ –ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫—É –£–∫—Ä–∞—ó–Ω–∏
   `,
   Markup.keyboard([
           ['EUR','USD'], 
           ['–ù–ë–£', '–ú–µ—Ç–∞–ª–∏'],
           ['–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä üßÆ']
       ])
       .resize()
       .extra()
  
  ));
  
  bot.hears((/[0-9]+$/i), async (ctx) => {
    const enteredInt = parseInt(ctx.message.text);
    const dataK = await fetch(process.env.NBY)
    .then(res => res.json())
    .then(data3 => {


      let usd = parseFloat(JSON.stringify(data3[25].rate))*enteredInt;
      let eur = parseFloat(JSON.stringify(data3[32].rate))*enteredInt;
      let czk = parseFloat(JSON.stringify(data3[22].rate))*enteredInt;
      let chf = parseFloat(JSON.stringify(data3[4].rate))*enteredInt;

      formatInfo = `–ö—É—Ä—Å –ù–ë–£ –Ω–∞ *${JSON.stringify(data3[25].exchangedate)}*     

            ${enteredInt} ${JSON.stringify(data3[25].cc)} -> üá∫üá¶ *${usd.toFixed(2)}*
            ${enteredInt} ${JSON.stringify(data3[32].cc)} -> üá∫üá¶ *${eur.toFixed(2)}*
            ${enteredInt} ${JSON.stringify(data3[22].cc)} -> üá∫üá¶ *${czk.toFixed(2)}*
            ${enteredInt}${JSON.stringify(data3[4].cc)} -> üá∫üá¶ *${chf.toFixed(2)}*
                `
      return ctx.replyWithMarkdown(formatInfo);

    })         
    .catch(error => console.log(error))
  })

   bot.on('text', async (ctx) => { //// bot.hears(/^[A-Z][a-z]+$/i, async (ctx) => {
    let formatInfo = '';
    const enteredText = ctx.message.text;
   
    
    if((enteredText == 'EUR') || (enteredText == 'USD') ){ // üí∂  üíµ
      const currency = currency_codes.code(enteredText) 
        try {
          const currencyObjMonoBank = await axios.get(process.env.API_MONOBANK)
          const currencyObjPrivateBank = await axios.get(process.env.API_PRIVATEBANK)
   
          const foundCurrencyMonoBank = currencyObjMonoBank.data.find((cur)=>{
              return cur.currencyCodeA.toString() === currency.number;
          }) 
          // get data with Pr—ñvateBank
          const foundCurrencPrivateBank = currencyObjPrivateBank.data.find((cur)=>{
            return cur.ccy === enteredText;
          }) 
         
          if(enteredText == 'EUR'){
            formatInfo =`
            –í–∞–ª—é—Ç–∞: *${currency.code}üí∂/UAH*, 
                         –ö—É–ø—ñ–≤–ª—è / –ü—Ä–æ–¥–∞–∂
            **Monobank** ‚ãÖ *${foundCurrencyMonoBank.rateBuy}* / *${foundCurrencyMonoBank.rateSell}* üá∫üá¶
            **–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫** ‚ãÖ *${foundCurrencPrivateBank.buy}* / *${foundCurrencPrivateBank.sale}* üá∫üá¶
            `   
          } else{
            formatInfo =`
            –í–∞–ª—é—Ç–∞: *${currency.code}üíµ/UAH*,
                          –ö—É–ø—ñ–≤–ª—è / –ü—Ä–æ–¥–∞–∂
            **Monobank** ‚ãÖ *${foundCurrencyMonoBank.rateBuy}* / *${foundCurrencyMonoBank.rateSell}* üá∫üá¶
            **–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫** ‚ãÖ *${foundCurrencPrivateBank.buy}* / *${foundCurrencPrivateBank.sale}* üá∫üá¶
            `  
          }
          ctx.replyWithMarkdown(formatInfo);
      } catch (error) {
          ctx.reply('–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ! –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –¥–æ 10 –∑–∞–ø–∏—Ç—ñ–≤');
          console.log(error)
      }

    }

    if (ctx.message.text == '–ù–ë–£'){

      const data = await fetch(process.env.NBY)
          .then(res => res.json())
          .then(data => {

            formatInfo = `–ö—É—Ä—Å –ù–ë–£ –Ω–∞ *${JSON.stringify(data[25].exchangedate)}*

             ${JSON.stringify(data[25].cc)} üá∫üá∏ -> üá∫üá¶*${JSON.stringify(data[25].rate)}*
             ${JSON.stringify(data[32].cc)} üá™üá∫ -> üá∫üá¶*${JSON.stringify(data[32].rate)}*
             ${JSON.stringify(data[22].cc)} üá®üá≠ -> üá∫üá¶*${JSON.stringify(data[22].rate)}*
             ${JSON.stringify(data[4].cc)} üá®üáø -> üá∫üá¶*${JSON.stringify(data[4].rate)}*
                          `
            return ctx.replyWithMarkdown(formatInfo);
          })         
          .catch(error => console.log(error))
    }

    if (ctx.message.text == '–ú–µ—Ç–∞–ª–∏'){
      const dataMetal = await fetch(process.env.NBY)
      .then(res => res.json())
      .then(dataM => {
        formatInfo = `*–ö—É—Ä—Å –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –º–µ—Ç–∞–ª—ñ–≤* –ù–ë–£ —Å—Ç–∞–Ω–æ–º –Ω–∞ *${JSON.stringify(dataM[25].exchangedate)}* –∑–∞ 1 Oz (1 —Ç—Ä–æ–π—Å—å–∫–∞ —É–Ω—Ü—ñ—è = 31.10348 –≥—Ä–∞–º)
                 
                ${JSON.stringify(dataM[58].txt)} -> *${JSON.stringify(dataM[58].rate)}* UAH
                ${JSON.stringify(dataM[59].txt)} -> *${JSON.stringify(dataM[59].rate)}* UAH
                ${JSON.stringify(dataM[60].txt)} -> *${JSON.stringify(dataM[60].rate)}* UAH
                ${JSON.stringify(dataM[61].txt)} -> *${JSON.stringify(dataM[61].rate)}* UAH   
                `
        return ctx.replyWithMarkdown(formatInfo);
      })         
      .catch(error => console.log(error))
       
    }
    
    if (ctx.message.text == '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä üßÆ'){
      try {
        const formatInfo =`
                          ‚úÖ –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞–ª—é—Ç–∏ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É: 
                          `  
       return  ctx.reply(formatInfo);
      }
      catch (error){
      }
     
    }
  }); 

  bot.help((ctx) => ctx.reply(HELP_LIST));

  bot.launch();

  console.log('–ë–æ—Ç —Å—Ç–∞—Ä—Ç');
